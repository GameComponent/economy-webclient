/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Economy service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0
 * Contact: info@gamecomponent.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface V1CreateCurrencyRequest
 */
export interface V1CreateCurrencyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1CreateCurrencyRequest
     */
    api?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateCurrencyRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateCurrencyRequest
     */
    shortName?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateCurrencyRequest
     */
    symbol?: string;
}

/**
 * 
 * @export
 * @interface V1CreateCurrencyResponse
 */
export interface V1CreateCurrencyResponse {
    /**
     * 
     * @type {string}
     * @memberof V1CreateCurrencyResponse
     */
    api?: string;
    /**
     * 
     * @type {V1Currency}
     * @memberof V1CreateCurrencyResponse
     */
    currency?: V1Currency;
}

/**
 * 
 * @export
 * @interface V1CreateItemRequest
 */
export interface V1CreateItemRequest {
    /**
     * 
     * @type {string}
     * @memberof V1CreateItemRequest
     */
    api?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateItemRequest
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface V1CreateItemResponse
 */
export interface V1CreateItemResponse {
    /**
     * 
     * @type {string}
     * @memberof V1CreateItemResponse
     */
    api?: string;
    /**
     * 
     * @type {V1Item}
     * @memberof V1CreateItemResponse
     */
    item?: V1Item;
}

/**
 * 
 * @export
 * @interface V1CreateStorageRequest
 */
export interface V1CreateStorageRequest {
    /**
     * 
     * @type {string}
     * @memberof V1CreateStorageRequest
     */
    api?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateStorageRequest
     */
    playerId?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateStorageRequest
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface V1CreateStorageResponse
 */
export interface V1CreateStorageResponse {
    /**
     * 
     * @type {string}
     * @memberof V1CreateStorageResponse
     */
    api?: string;
    /**
     * 
     * @type {V1Storage}
     * @memberof V1CreateStorageResponse
     */
    storage?: V1Storage;
}

/**
 * 
 * @export
 * @interface V1Currency
 */
export interface V1Currency {
    /**
     * 
     * @type {string}
     * @memberof V1Currency
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof V1Currency
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof V1Currency
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof V1Currency
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Currency
     */
    shortName?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Currency
     */
    symbol?: string;
}

/**
 * 
 * @export
 * @interface V1GetCurrencyResponse
 */
export interface V1GetCurrencyResponse {
    /**
     * 
     * @type {string}
     * @memberof V1GetCurrencyResponse
     */
    api?: string;
    /**
     * 
     * @type {V1Currency}
     * @memberof V1GetCurrencyResponse
     */
    currency?: V1Currency;
}

/**
 * 
 * @export
 * @interface V1GetItemResponse
 */
export interface V1GetItemResponse {
    /**
     * 
     * @type {string}
     * @memberof V1GetItemResponse
     */
    api?: string;
    /**
     * 
     * @type {V1Item}
     * @memberof V1GetItemResponse
     */
    item?: V1Item;
}

/**
 * 
 * @export
 * @interface V1GetPlayerResponse
 */
export interface V1GetPlayerResponse {
    /**
     * 
     * @type {string}
     * @memberof V1GetPlayerResponse
     */
    api?: string;
    /**
     * 
     * @type {V1Player}
     * @memberof V1GetPlayerResponse
     */
    player?: V1Player;
}

/**
 * 
 * @export
 * @interface V1GetStorageResponse
 */
export interface V1GetStorageResponse {
    /**
     * 
     * @type {string}
     * @memberof V1GetStorageResponse
     */
    api?: string;
    /**
     * 
     * @type {V1Storage}
     * @memberof V1GetStorageResponse
     */
    storage?: V1Storage;
}

/**
 * 
 * @export
 * @interface V1GiveCurrencyRequest
 */
export interface V1GiveCurrencyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1GiveCurrencyRequest
     */
    api?: string;
    /**
     * 
     * @type {string}
     * @memberof V1GiveCurrencyRequest
     */
    storageId?: string;
    /**
     * 
     * @type {string}
     * @memberof V1GiveCurrencyRequest
     */
    currencyId?: string;
    /**
     * 
     * @type {string}
     * @memberof V1GiveCurrencyRequest
     */
    amount?: string;
}

/**
 * 
 * @export
 * @interface V1GiveCurrencyResponse
 */
export interface V1GiveCurrencyResponse {
    /**
     * 
     * @type {string}
     * @memberof V1GiveCurrencyResponse
     */
    api?: string;
    /**
     * 
     * @type {V1StorageCurrency}
     * @memberof V1GiveCurrencyResponse
     */
    currency?: V1StorageCurrency;
}

/**
 * 
 * @export
 * @interface V1GiveItemRequest
 */
export interface V1GiveItemRequest {
    /**
     * 
     * @type {string}
     * @memberof V1GiveItemRequest
     */
    api?: string;
    /**
     * 
     * @type {string}
     * @memberof V1GiveItemRequest
     */
    storageId?: string;
    /**
     * 
     * @type {string}
     * @memberof V1GiveItemRequest
     */
    itemId?: string;
}

/**
 * 
 * @export
 * @interface V1GiveItemResponse
 */
export interface V1GiveItemResponse {
    /**
     * 
     * @type {string}
     * @memberof V1GiveItemResponse
     */
    api?: string;
    /**
     * 
     * @type {string}
     * @memberof V1GiveItemResponse
     */
    storageId?: string;
    /**
     * 
     * @type {V1StorageItem}
     * @memberof V1GiveItemResponse
     */
    item?: V1StorageItem;
}

/**
 * 
 * @export
 * @interface V1Item
 */
export interface V1Item {
    /**
     * 
     * @type {string}
     * @memberof V1Item
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof V1Item
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof V1Item
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof V1Item
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface V1ListCurrencyResponse
 */
export interface V1ListCurrencyResponse {
    /**
     * 
     * @type {string}
     * @memberof V1ListCurrencyResponse
     */
    api?: string;
    /**
     * 
     * @type {Array<V1Currency>}
     * @memberof V1ListCurrencyResponse
     */
    currencies?: Array<V1Currency>;
    /**
     * 
     * @type {string}
     * @memberof V1ListCurrencyResponse
     */
    nextPageToken?: string;
    /**
     * 
     * @type {number}
     * @memberof V1ListCurrencyResponse
     */
    totalSize?: number;
}

/**
 * 
 * @export
 * @interface V1ListItemResponse
 */
export interface V1ListItemResponse {
    /**
     * 
     * @type {string}
     * @memberof V1ListItemResponse
     */
    api?: string;
    /**
     * 
     * @type {Array<V1Item>}
     * @memberof V1ListItemResponse
     */
    items?: Array<V1Item>;
    /**
     * 
     * @type {string}
     * @memberof V1ListItemResponse
     */
    nextPageToken?: string;
    /**
     * 
     * @type {number}
     * @memberof V1ListItemResponse
     */
    totalSize?: number;
}

/**
 * 
 * @export
 * @interface V1ListPlayerResponse
 */
export interface V1ListPlayerResponse {
    /**
     * 
     * @type {string}
     * @memberof V1ListPlayerResponse
     */
    api?: string;
    /**
     * 
     * @type {Array<V1Player>}
     * @memberof V1ListPlayerResponse
     */
    players?: Array<V1Player>;
    /**
     * 
     * @type {string}
     * @memberof V1ListPlayerResponse
     */
    nextPageToken?: string;
    /**
     * 
     * @type {number}
     * @memberof V1ListPlayerResponse
     */
    totalSize?: number;
}

/**
 * 
 * @export
 * @interface V1ListStorageResponse
 */
export interface V1ListStorageResponse {
    /**
     * 
     * @type {string}
     * @memberof V1ListStorageResponse
     */
    api?: string;
    /**
     * 
     * @type {Array<V1Storage>}
     * @memberof V1ListStorageResponse
     */
    storages?: Array<V1Storage>;
    /**
     * 
     * @type {string}
     * @memberof V1ListStorageResponse
     */
    nextPageToken?: string;
    /**
     * 
     * @type {number}
     * @memberof V1ListStorageResponse
     */
    totalSize?: number;
}

/**
 * 
 * @export
 * @interface V1Player
 */
export interface V1Player {
    /**
     * 
     * @type {string}
     * @memberof V1Player
     */
    id?: string;
    /**
     * 
     * @type {Array<V1Storage>}
     * @memberof V1Player
     */
    storages?: Array<V1Storage>;
}

/**
 * 
 * @export
 * @interface V1Storage
 */
export interface V1Storage {
    /**
     * 
     * @type {string}
     * @memberof V1Storage
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof V1Storage
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof V1Storage
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof V1Storage
     */
    playerId?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Storage
     */
    name?: string;
    /**
     * 
     * @type {Array<V1StorageItem>}
     * @memberof V1Storage
     */
    items?: Array<V1StorageItem>;
}

/**
 * 
 * @export
 * @interface V1StorageCurrency
 */
export interface V1StorageCurrency {
    /**
     * 
     * @type {string}
     * @memberof V1StorageCurrency
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof V1StorageCurrency
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof V1StorageCurrency
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof V1StorageCurrency
     */
    currencyId?: string;
    /**
     * 
     * @type {string}
     * @memberof V1StorageCurrency
     */
    amount?: string;
}

/**
 * 
 * @export
 * @interface V1StorageItem
 */
export interface V1StorageItem {
    /**
     * 
     * @type {string}
     * @memberof V1StorageItem
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof V1StorageItem
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof V1StorageItem
     */
    updatedAt?: Date;
    /**
     * 
     * @type {V1Item}
     * @memberof V1StorageItem
     */
    item?: V1Item;
}

/**
 * 
 * @export
 * @interface V1UpdateItemRequest
 */
export interface V1UpdateItemRequest {
    /**
     * 
     * @type {string}
     * @memberof V1UpdateItemRequest
     */
    api?: string;
    /**
     * 
     * @type {string}
     * @memberof V1UpdateItemRequest
     */
    itemId?: string;
    /**
     * 
     * @type {string}
     * @memberof V1UpdateItemRequest
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface V1UpdateItemResponse
 */
export interface V1UpdateItemResponse {
    /**
     * 
     * @type {string}
     * @memberof V1UpdateItemResponse
     */
    api?: string;
    /**
     * 
     * @type {V1Item}
     * @memberof V1UpdateItemResponse
     */
    item?: V1Item;
}


/**
 * EconomyServiceApi - fetch parameter creator
 * @export
 */
export const EconomyServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a currency
         * @param {V1CreateCurrencyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCurrency(body: V1CreateCurrencyRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCurrency.');
            }
            const localVarPath = `/v1/currency`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1CreateCurrencyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an Item
         * @param {V1CreateItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem(body: V1CreateItemRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createItem.');
            }
            const localVarPath = `/v1/item`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1CreateItemRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new Storage
         * @param {V1CreateStorageRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStorage(body: V1CreateStorageRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createStorage.');
            }
            const localVarPath = `/v1/storage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1CreateStorageRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a currency
         * @param {string} currencyId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrency(currencyId: string, api?: string, options: any = {}): FetchArgs {
            // verify required parameter 'currencyId' is not null or undefined
            if (currencyId === null || currencyId === undefined) {
                throw new RequiredError('currencyId','Required parameter currencyId was null or undefined when calling getCurrency.');
            }
            const localVarPath = `/v1/currency/{currency_id}`
                .replace(`{${"currency_id"}}`, encodeURIComponent(String(currencyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (api !== undefined) {
                localVarQueryParameter['api'] = api;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an Item
         * @param {string} itemId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(itemId: string, api?: string, options: any = {}): FetchArgs {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling getItem.');
            }
            const localVarPath = `/v1/item/{item_id}`
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (api !== undefined) {
                localVarQueryParameter['api'] = api;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary To see what Storages belong to an User
         * @param {string} playerId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer(playerId: string, api?: string, options: any = {}): FetchArgs {
            // verify required parameter 'playerId' is not null or undefined
            if (playerId === null || playerId === undefined) {
                throw new RequiredError('playerId','Required parameter playerId was null or undefined when calling getPlayer.');
            }
            const localVarPath = `/v1/player/{player_id}`
                .replace(`{${"player_id"}}`, encodeURIComponent(String(playerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (api !== undefined) {
                localVarQueryParameter['api'] = api;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the contents of a storage
         * @param {string} storageId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorage(storageId: string, api?: string, options: any = {}): FetchArgs {
            // verify required parameter 'storageId' is not null or undefined
            if (storageId === null || storageId === undefined) {
                throw new RequiredError('storageId','Required parameter storageId was null or undefined when calling getStorage.');
            }
            const localVarPath = `/v1/storage/{storage_id}`
                .replace(`{${"storage_id"}}`, encodeURIComponent(String(storageId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (api !== undefined) {
                localVarQueryParameter['api'] = api;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Give an amount of Currency to a Storage
         * @param {V1GiveCurrencyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giveCurrency(body: V1GiveCurrencyRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling giveCurrency.');
            }
            const localVarPath = `/v1/storage/give/currency`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1GiveCurrencyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Give Item to a Storage
         * @param {V1GiveItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giveItem(body: V1GiveItemRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling giveItem.');
            }
            const localVarPath = `/v1/storage/give/item`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1GiveItemRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Shows all currencies
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrency(api?: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/currency`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (api !== undefined) {
                localVarQueryParameter['api'] = api;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Items
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItem(api?: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/item`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (api !== undefined) {
                localVarQueryParameter['api'] = api;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all players
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlayer(api?: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/player`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (api !== undefined) {
                localVarQueryParameter['api'] = api;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all storages
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStorage(api?: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/storage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (api !== undefined) {
                localVarQueryParameter['api'] = api;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an Item
         * @param {V1UpdateItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem(body: V1UpdateItemRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateItem.');
            }
            const localVarPath = `/v1/item`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1UpdateItemRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EconomyServiceApi - functional programming interface
 * @export
 */
export const EconomyServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a currency
         * @param {V1CreateCurrencyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCurrency(body: V1CreateCurrencyRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1CreateCurrencyResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).createCurrency(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create an Item
         * @param {V1CreateItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem(body: V1CreateItemRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1CreateItemResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).createItem(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a new Storage
         * @param {V1CreateStorageRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStorage(body: V1CreateStorageRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1CreateStorageResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).createStorage(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a currency
         * @param {string} currencyId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrency(currencyId: string, api?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1GetCurrencyResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).getCurrency(currencyId, api, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get an Item
         * @param {string} itemId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(itemId: string, api?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1GetItemResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).getItem(itemId, api, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary To see what Storages belong to an User
         * @param {string} playerId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer(playerId: string, api?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1GetPlayerResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).getPlayer(playerId, api, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the contents of a storage
         * @param {string} storageId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorage(storageId: string, api?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1GetStorageResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).getStorage(storageId, api, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Give an amount of Currency to a Storage
         * @param {V1GiveCurrencyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giveCurrency(body: V1GiveCurrencyRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1GiveCurrencyResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).giveCurrency(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Give Item to a Storage
         * @param {V1GiveItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giveItem(body: V1GiveItemRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1GiveItemResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).giveItem(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Shows all currencies
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrency(api?: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ListCurrencyResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).listCurrency(api, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all Items
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItem(api?: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ListItemResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).listItem(api, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all players
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlayer(api?: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ListPlayerResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).listPlayer(api, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all storages
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStorage(api?: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ListStorageResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).listStorage(api, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update an Item
         * @param {V1UpdateItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem(body: V1UpdateItemRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1UpdateItemResponse> {
            const localVarFetchArgs = EconomyServiceApiFetchParamCreator(configuration).updateItem(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EconomyServiceApi - factory interface
 * @export
 */
export const EconomyServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a currency
         * @param {V1CreateCurrencyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCurrency(body: V1CreateCurrencyRequest, options?: any) {
            return EconomyServiceApiFp(configuration).createCurrency(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create an Item
         * @param {V1CreateItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem(body: V1CreateItemRequest, options?: any) {
            return EconomyServiceApiFp(configuration).createItem(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a new Storage
         * @param {V1CreateStorageRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStorage(body: V1CreateStorageRequest, options?: any) {
            return EconomyServiceApiFp(configuration).createStorage(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a currency
         * @param {string} currencyId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrency(currencyId: string, api?: string, options?: any) {
            return EconomyServiceApiFp(configuration).getCurrency(currencyId, api, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get an Item
         * @param {string} itemId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(itemId: string, api?: string, options?: any) {
            return EconomyServiceApiFp(configuration).getItem(itemId, api, options)(fetch, basePath);
        },
        /**
         * 
         * @summary To see what Storages belong to an User
         * @param {string} playerId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer(playerId: string, api?: string, options?: any) {
            return EconomyServiceApiFp(configuration).getPlayer(playerId, api, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the contents of a storage
         * @param {string} storageId 
         * @param {string} [api] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorage(storageId: string, api?: string, options?: any) {
            return EconomyServiceApiFp(configuration).getStorage(storageId, api, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Give an amount of Currency to a Storage
         * @param {V1GiveCurrencyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giveCurrency(body: V1GiveCurrencyRequest, options?: any) {
            return EconomyServiceApiFp(configuration).giveCurrency(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Give Item to a Storage
         * @param {V1GiveItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giveItem(body: V1GiveItemRequest, options?: any) {
            return EconomyServiceApiFp(configuration).giveItem(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Shows all currencies
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrency(api?: string, pageSize?: number, pageToken?: string, options?: any) {
            return EconomyServiceApiFp(configuration).listCurrency(api, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all Items
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItem(api?: string, pageSize?: number, pageToken?: string, options?: any) {
            return EconomyServiceApiFp(configuration).listItem(api, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all players
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlayer(api?: string, pageSize?: number, pageToken?: string, options?: any) {
            return EconomyServiceApiFp(configuration).listPlayer(api, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all storages
         * @param {string} [api] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStorage(api?: string, pageSize?: number, pageToken?: string, options?: any) {
            return EconomyServiceApiFp(configuration).listStorage(api, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update an Item
         * @param {V1UpdateItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem(body: V1UpdateItemRequest, options?: any) {
            return EconomyServiceApiFp(configuration).updateItem(body, options)(fetch, basePath);
        },
    };
};

/**
 * EconomyServiceApi - object-oriented interface
 * @export
 * @class EconomyServiceApi
 * @extends {BaseAPI}
 */
export class EconomyServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create a currency
     * @param {V1CreateCurrencyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public createCurrency(body: V1CreateCurrencyRequest, options?: any) {
        return EconomyServiceApiFp(this.configuration).createCurrency(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create an Item
     * @param {V1CreateItemRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public createItem(body: V1CreateItemRequest, options?: any) {
        return EconomyServiceApiFp(this.configuration).createItem(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a new Storage
     * @param {V1CreateStorageRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public createStorage(body: V1CreateStorageRequest, options?: any) {
        return EconomyServiceApiFp(this.configuration).createStorage(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a currency
     * @param {string} currencyId 
     * @param {string} [api] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public getCurrency(currencyId: string, api?: string, options?: any) {
        return EconomyServiceApiFp(this.configuration).getCurrency(currencyId, api, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get an Item
     * @param {string} itemId 
     * @param {string} [api] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public getItem(itemId: string, api?: string, options?: any) {
        return EconomyServiceApiFp(this.configuration).getItem(itemId, api, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary To see what Storages belong to an User
     * @param {string} playerId 
     * @param {string} [api] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public getPlayer(playerId: string, api?: string, options?: any) {
        return EconomyServiceApiFp(this.configuration).getPlayer(playerId, api, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the contents of a storage
     * @param {string} storageId 
     * @param {string} [api] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public getStorage(storageId: string, api?: string, options?: any) {
        return EconomyServiceApiFp(this.configuration).getStorage(storageId, api, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Give an amount of Currency to a Storage
     * @param {V1GiveCurrencyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public giveCurrency(body: V1GiveCurrencyRequest, options?: any) {
        return EconomyServiceApiFp(this.configuration).giveCurrency(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Give Item to a Storage
     * @param {V1GiveItemRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public giveItem(body: V1GiveItemRequest, options?: any) {
        return EconomyServiceApiFp(this.configuration).giveItem(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Shows all currencies
     * @param {string} [api] 
     * @param {number} [pageSize] 
     * @param {string} [pageToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public listCurrency(api?: string, pageSize?: number, pageToken?: string, options?: any) {
        return EconomyServiceApiFp(this.configuration).listCurrency(api, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all Items
     * @param {string} [api] 
     * @param {number} [pageSize] 
     * @param {string} [pageToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public listItem(api?: string, pageSize?: number, pageToken?: string, options?: any) {
        return EconomyServiceApiFp(this.configuration).listItem(api, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all players
     * @param {string} [api] 
     * @param {number} [pageSize] 
     * @param {string} [pageToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public listPlayer(api?: string, pageSize?: number, pageToken?: string, options?: any) {
        return EconomyServiceApiFp(this.configuration).listPlayer(api, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all storages
     * @param {string} [api] 
     * @param {number} [pageSize] 
     * @param {string} [pageToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public listStorage(api?: string, pageSize?: number, pageToken?: string, options?: any) {
        return EconomyServiceApiFp(this.configuration).listStorage(api, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update an Item
     * @param {V1UpdateItemRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyServiceApi
     */
    public updateItem(body: V1UpdateItemRequest, options?: any) {
        return EconomyServiceApiFp(this.configuration).updateItem(body, options)(this.fetch, this.basePath);
    }

}

